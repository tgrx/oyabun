name: Release


on:
  workflow_dispatch:


env:
  CACHE_CUSTOM_KEY: '0'
  POETRY_VIRTUALENVS_CREATE: false
  POETRY_VIRTUALENVS_IN_PROJECT: false


jobs:

  dist:
    if: github.actor == 'tgrx'
    name: 'The distribution is built.'

    outputs:
      version: ${{ steps.get-version.outputs.result }}

    runs-on: 'ubuntu-latest'

    steps:

      - name: '🧱 The code is pulled from the repository.'
        uses: actions/checkout@v2

      - name: '🐍 Python is set up.'
        uses: actions/setup-python@v2
        with:
          architecture: 'x64'
          python-version: '3.10'

      - name: '☁️ The whole Python is cached.'
        id: cache-python
        uses: actions/cache@v2
        with:
          key: cache-python-dist-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('poetry.lock') }}-${{ env.CACHE_CUSTOM_KEY }}"
          path: ${{ env.pythonLocation }}

      - name: '🪛 Poetry is installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          pip install poetry
          python -c 'import poetry; print(poetry)'
          poetry debug

      - name: '📚 The library distribution is built.'
        run: |
          make build

      - name: '🏷 The library version is set as the output.'
        id: get-version
        run: |
          echo "::set-output name=result::$(make get-version)"

      - name: '📦 The library distribution is uploaded as an artifact.'
        uses: actions/upload-artifact@v2
        with:
          name: oyabun-${{ steps.get-version.outputs.result }}
          path: dist/


  test-dist:
    if: github.actor == 'tgrx'
    name: 'The library distribution passes all tests.'

    outputs:
      version: ${{ needs.dist.outputs.version }}

    needs:
      - dist

    strategy:
      matrix:
        os:
          - 'macos-latest'
          - 'ubuntu-latest'
          - 'windows-latest'
        python-version:
          - '3.10'

    runs-on: ${{ matrix.os }}

    steps:

      - name: '🧱 The code is pulled from the repository.'
        uses: actions/checkout@v2

      - name: '🪚 The library sources are deleted from the local code.'
        uses: JesseTG/rm@v1.0.2
        with:
          path: oyabun

      - name: '🐍 Python is set up.'
        uses: actions/setup-python@v2
        with:
          architecture: 'x64'
          python-version: ${{ matrix.python-version }}

      - name: '☁️ The whole Python is cached.'
        id: cache-python
        uses: actions/cache@v2
        with:
          key: cache-python-test-dist-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('poetry.lock') }}-${{ env.CACHE_CUSTOM_KEY }}"
          path: ${{ env.pythonLocation }}

      - name: '🪛 Poetry is installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          pip install poetry
          python -c 'import poetry; print(poetry)'
          poetry debug

      - name: '📦 The library distribution artifact is downloaded.'
        uses: actions/download-artifact@v2
        with:
          name: oyabun-${{ needs.dist.outputs.version }}
          path: dist/

      - name: '🚀 The library is installed from distribution'
        if: ${{ !contains(matrix.os, 'windows') }}
        run: |
          pip install dist/oyabun-${{ needs.dist.outputs.version }}.tar.gz

      - name: '🚀 The library version is correct'
        run: |
          make get-version

      - name: '🛢 The dev dependencies are installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          poetry export --dev --format=requirements.txt --output=requirements.txt --without-hashes
          pip install --requirement requirements.txt

      - name: '🚦 The library distribution passes all tests.'
        run: make tests


  test-deploy:
    if: github.actor == 'tgrx'
    name: 'The library is deployed on test PyPI.'

    outputs:
      version: ${{ needs.dist.outputs.version }}

    needs:
      - dist

    runs-on: 'ubuntu-latest'

    steps:

      - name: '📦 The library distribution artifact is downloaded.'
        uses: actions/download-artifact@v2
        with:
          name: oyabun-${{ needs.dist.outputs.version }}
          path: dist/

      - name: '🔷 A new library version is uploaded on test PyPI.'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true


  deploy:
    if: github.actor == 'tgrx'
    name: 'The library is deployed on PyPI.'

    needs:
      - test-dist
      - test-deploy

    runs-on: 'ubuntu-latest'

    steps:

      - name: '📦 The library distribution artifact is downloaded.'
        uses: actions/download-artifact@v2
        with:
          name: oyabun-${{ needs.test-deploy.outputs.version }}
          path: dist/

      - name: '💎 A new library version is uploaded on PyPI.'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          verbose: true
