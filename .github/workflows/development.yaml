name: Development


on:
  push:
  workflow_dispatch:


env:
  CACHE_CUSTOM_KEY: '0'
  POETRY_VIRTUALENVS_CREATE: false
  POETRY_VIRTUALENVS_IN_PROJECT: false


jobs:

  qa:
    name: 'The code base passes all QA checks.'

    strategy:
      matrix:
        os:
          - 'macos-latest'
          - 'ubuntu-latest'
        python-version:
          - '3.10'

    runs-on: ${{ matrix.os }}

    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
      python-location: ${{ env.pythonLocation }}
      python-version: ${{ matrix.python-version }}
      runs-on: ${{ matrix.os }}

    steps:

      - name: '🧱 The code is pulled from the repository.'
        uses: actions/checkout@v3

      - name: '🐍 Python is set up.'
        uses: actions/setup-python@v4
        with:
          architecture: 'x64'
          python-version: ${{ matrix.python-version }}

      - name: '🔑 Runtime cache key is calculated.'
        id: cache-key
        run: |
          echo "RUNTIME_CACHE_KEY=dev-${{ matrix.os }}-${{ hashFiles('poetry.lock') }}-${{ env.CACHE_CUSTOM_KEY }}" >> $GITHUB_ENV

      - name: '☁️ The whole Python is cached.'
        id: cache-python
        uses: actions/cache@v3
        with:
          key: ${{ env.RUNTIME_CACHE_KEY }}
          path: ${{ env.pythonLocation }}

      - name: '🪛 Poetry is installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          pip install poetry
          python -c 'import poetry; print(poetry)'
          poetry debug info

      - name: '🔋 The dependencies are installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          poetry export --with dev --format=requirements.txt --output=requirements.txt --without-hashes
          pip install --requirement requirements.txt

      - name: '🍺 The code passes all QA checks'
        run: |
          poetry build
          pip install dist/*.whl
          make qa

      - name: '📝 The coverage report is uploaded to codecov.io'
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml
          name: oyabun
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
